Questao 01  A expressão "p == &i" é verdadeira (1), enquanto "*p - *q" é igual a -2. Já "**&p" é igual a 3. Por fim, a expressão "3 - *p/(*q) + 7" resulta em 10.
p == &i;: Verdadeiro (1). *p - *q;: -2. **&p;: 3. 3 - *p/(*q) + 7;: 10.

Quetao 02 \ main(){
  int i=5, *p;
  p = &i;
  printf("%p %p %d %d %d %d\n", p, p+1, p+2, *&p, 3*p, *&p+4);
}
p = onde o ponteiro armazena dados. de acordo com a questão (4094) 
p+1 = local de armazenamento do ponteiro com um acréscimo de
(de acordo com a questão) 2 bytes. (4096) supostamente
*p+2 = Elemento armazenado no ponteiro (i [i=5]) + 2, resultando em 7.
**&p = uma forma diferente de expressar o valor apontado por *p (5)
3**p = 3 multiplicando o elemento de p (15)
**&p+4 = o elemento de p somado a 4 (9)

Questao 03 \ 
A expressão *q = &j é ilegal, pois tenta atribuir o endereço de j a um inteiro (*q). A expressão p = &&i é legal, pois obtém o endereço de i e atribui a p. A expressão i = (*&j) é ilegal, pois tenta desreferenciar o endereço de j. A expressão i = *j é legal, pois desreferencia o endereço de j e atribui a i. A expressão i = &&j é legal, pois obtém o valor de j e atribui a i. A expressão q = *p é ilegal, pois tenta atribuir um valor inteiro a um ponteiro. A expressão i = (*p)++ + *q é legal, pois incrementa o valor apontado por p e adiciona ao valor apontado por q, atribuindo a i.

Questao 04 \ A)
Esse código coloca o ponteiro na posição de memória do int "valor" para poder modificar o número de "valor" realizando operações apenas com o ponteiro
B) a mesma coisa da letra "A)", porém agora em ponto flutuante
C)
p3 = &nome[0];
Essa função associa a posição de memoria do primeiro elemento da string "nome" com o ponteiro "p3" 

A segunda iguala a variável "aux" com o primeiro elemento de "p3" fazendo que o "printf" mostre a primeira letra da string "nome"
D)
Iguala "p3" com o quinto elemento de "nome", depois iguala o primeiro elemento de p3 (Quinto elemento de "nome") a "Aux"
E)
iguala a posição de memória de "p3" com a posição de memória de "nome" e depois imprime o primeiro elemento de p3.
(Que é o primeiro elemento de "nome")
F)
Iguala a posição de memória inicial de "p3" com o quinto elemento de "p3" 
(Que já estava associado ao String "nome")
Quando o novo primeiro elemento do ponteiro é mostrado no printf, o resultado é o antigo quinto elemento do ponteiro
G)
Decrementa uma posição de memória do ponteiro "p3" fazendo o novo primeiro elemento ser o quarto elemento do String "nome"
H)
(Praticamente a mesma coisa)
.cria valores para o vetor 
.associa "p4" com a posição de memória do primeiro elemento do vetor
.iguala "idade" com o primeiro elemento de "p4"
i)
.Posição de memória inicial de "p5" = segunda posição de memória de "p4"
."idade" = primeiro elemento de "p5"
J)
.Posição de memória inicial de "p4" = segunda posição de memória de "p5"
."idade" = primeiro elemento de "p4"
L) 
.{posição de memória inicial do "P4"} = {posição de memória inicial de "P4" - 2}
(Considerando que depois de uma série de operações, o elemento inicial do P4 estava apontando para o terceiro elemento do vetor, essa função da questão L faz com que P4 volte a apontar para o elemento inicial do vetor)
M)
Iguala a posição de memória inicial de "p5" com o {terceiro elemento do vetor - 1} fazendo com que "p5" aponte para o segundo elemento do vetor
N)
Incrementa uma posição de memória ao ponteiro "p5" fazendo ele apontar para o terceiro elemento de "vetor"

Questao 05 \ contador/valor/valor/endereco/endereco i= vet[0] 1 1.1 *(f x 0) = 1.1 &vet[0] = 6644B60 (f + 0)=66F44B60 i= 1 vet[1] 2.2 *(f + 1) = 2.2 Svet[1] = 66F44B64 (f+

= 66F44B64 i = 2 vet[2] 3.3 *(f+2) =3:3 &vet[2] 6644B68 (f +
=66F44B68 i = 3 vet[3] = 4.4 *(f + 3) = 4.4 &vet[3] = 66F44B6C (f + 3)= 66F44B6C L = 4 vet[4] = 5.5 *(f + 4) = 5.5 &vet[4] 66F44B70 (f+
= 66F44B70
Questao 06 \  Para determinar qual expressão referencia o valor do terceiro elemento do vetor pulo[], devemos entender como a aritmética de ponteiros funciona em C. *(pulo + 2) e pulo + 2 são as expressões que referenciam o valor do terceiro elemento do vetor.



Questao 07 \  p aponta para o segundo elemento do array mat. p = mat; é uma expressão válida, assim como x = (*mat), que atribui o valor do primeiro elemento do array à variável x. Todas as expressões são corretas em C.

Questao 08 \ O programa imprime os elementos do array vet[] na saída. Ele declara e inicializa o array com os valores {4, 9, 13}. Um loop for é usado para percorrer o array e imprimir cada elemento usando a função printf(). O resultado seria: "4 9 13".


Questao 09 #include <stdio.h>

struct teste { int x; char nome[10]; // Deixei um tamanho arbitrário para o nome };

int main() { struct teste *s;

// Alocando memória para a struct
s = (struct teste *)malloc(sizeof(struct teste));

// Atribuindo valores aos membros da struct
s->x = 3;
strcpy(s->nome, "jose");

// Imprimindo os valores
printf("%d\n", s->x);
printf("%s\n", s->nome);

// Liberando a memória alocada
free(s);

return 0;
3
jose

Questao 10 \  A declaração int const *x = 3 resulta em um comportamento indefinido e warning de conversão de tipos. Incrementar *x em printf gera outro comportamento indefinido. O resultado do programa é imprevisível e precisa ser corrigido para funcionar corretamente.

Questao 11 \ Os endereços de memória para x+1, x+2 e x+3 são calculados com base no tamanho dos diferentes tipos de dado: char, int, float e double. O programa em C pode testar essas suposições.

Questão 12 \  Vamos analisar comandos:
1. aloha[2] = value; - atribui valor ao elemento de índice 2 do array aloha.
2. scanf("%f", &aloha); - lê e armazena valor float na variável aloha.
3. aloha = "value"; - inválido, não pode atribuir string a um array de floats.
4. printf("%f", aloha); - inválido, printf espera float, aloha é um array.
5. coisas[4][4] = aloha[3]; - atribui valor de índice 3 do array aloha ao elemento [4][4] do array coisas.
6. coisas[5] = aloha; - inválido, não pode atribuir array a elemento de array multidimensional.
7. pf = value; - inválido, pf não está declarado.
8. pf = aloha; - inválido, pf não está declarado.
Comandos válidos são: 1, 2, 4 e 5.

Questao 13 \ A memória é alocada dinamicamente usando malloc(), mas nunca é liberada usando free(), resultando em vazamentos de memória após o término do programa.

Questao 14 \ 

#include <stdio.h>

// Declaração de duas funções que serão utilizadas no programa
int soma(int a, int b) {
    return a + b;
}

int subtracao(int a, int b) {
    return a - b;
}

int main() {
    int (*operacao)(int, int); // Declaração de um ponteiro para função

    operacao = soma; // Atribui o endereço da função soma ao ponteiro

    int resultado = operacao(5, 3); // Chama a função apontada pelo ponteiro
    printf("Resultado da soma: %d\n", resultado);

    operacao = subtracao; // Altera o ponteiro para apontar para a função subtracao

    resultado = operacao(5, 3); // Chama a função apontada pelo ponteiro
    printf("Resultado da subtração: %d\n", resultado);

    return 0;
}

Questao 15 \ 

#include <stdio.h>
#include <stdlib.h>

// Função para comparar dois floats (necessária para a função qsort)
int compare(const void *a, const void *b) {
    float *float_a = (float *)a;
    float *float_b = (float *)b;
    if (*float_a < *float_b) {
        return -1;
    } else if (*float_a > *float_b) {
        return 1;
    } else {
        return 0;
    }
}

// Função para ler n valores do tipo float e apresentá-los em ordem crescente
void lerEOrdenar(float *valores, int n) {
    // Aloca memória dinamicamente para os valores
    valores = (float *)malloc(n * sizeof(float));
    if (valores == NULL) {
        printf("Erro ao alocar memória.\n");
        return;
    }

    // Lê os valores
    printf("Digite os %d valores:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%f", &valores[i]);
    }

    // Ordena os valores em ordem crescente
    qsort(valores, n, sizeof(float), compare);

    // Apresenta os valores em ordem crescente
    printf("Valores em ordem crescente:\n");
    for (int i = 0; i < n; i++) {
        printf("%.2f\n", valores[i]);
    }

    // Libera a memória alocada
    free(valores);
}

int main() {
    int n;
    printf("Quantos valores deseja ler? ");
    scanf("%d", &n);

    float *valores;
    lerEOrdenar(valores, n);

    return 0;
}

Questao 16 \

 
#include <stdio.h>
#include <stdlib.h>

// Função para comparar dois floats (necessária para a função qsort)
int compare(const void *a, const void *b) {
    float float_a = *((float *)a);
    float float_b = *((float *)b);
    if (float_a < float_b) {
        return -1;
    } else if (float_a > float_b) {
        return 1;
    } else {
        return 0;
    }
}

// Função para ler n valores do tipo float e apresentá-los em ordem crescente
void lerEOrdenar(float *valores, int n) {
    // Aloca memória dinamicamente para os valores
    valores = (float *)malloc(n * sizeof(float));
    if (valores == NULL) {
        printf("Erro ao alocar memória.\n");
        return;
    }

    // Lê os valores
    printf("Digite os %d valores:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%f", &valores[i]);
    }

    // Ordena os valores em ordem crescente
    qsort(valores, n, sizeof(float), compare);

    // Apresenta os valores em ordem crescente
    printf("Valores em ordem crescente:\n");
    for (int i = 0; i < n; i++) {
        printf("%.2f\n", valores[i]);
    }

    // Libera a memória alocada
    free(valores);
}

int main() {
    int n;
    printf("Quantos valores deseja ler? ");
    scanf("%d", &n);

    float *valores;
    lerEOrdenar(valores, n);

    return 0;
}

Questão 17 \


#include <stdio.h>
#include <stdlib.h>

// Função de comparação para ordenar em ordem crescente
int compare(const void *a, const void *b) {
    float float_a = *((float*)a);
    float float_b = *((float*)b);
    if (float_a < float_b) return -1;
    if (float_a > float_b) return 1;
    return 0;
}

// Função para ler os valores, ordená-los e imprimir em ordem crescente
void lerEOrdenar(float *valores, int n) {
    // Aloca memória dinamicamente para os valores
    valores = (float *)malloc(n * sizeof(float));
    if (valores == NULL) {
        printf("Erro ao alocar memória.\n");
        return;
    }

    // Lê os valores
    printf("Digite os %d valores:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%f", &valores[i]);
    }

    // Ordena os valores em ordem crescente usando a função qsort
    qsort(valores, n, sizeof(float), compare);

    // Apresenta os valores em ordem crescente
    printf("Valores em ordem crescente:\n");
    for (int i = 0; i < n; i++) {
        printf("%.2f\n", valores[i]);
    }

    // Libera a memória alocada
    free(valores);
}

int main() {
    int n;
    printf("Quantos valores deseja ler? ");
    scanf("%d", &n);

    float *valores;
    lerEOrdenar(valores, n);

    return 0;
}
